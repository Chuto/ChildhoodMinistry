
@{
    ViewBag.Title = "Index";
}

<h2>Задание</h2>

<p>
    Для Министерства Детства необходимо реализовать веб приложение по учёту детей и детских садов.
    Для детских садов необходимо знать их номер, адрес, и какие дети в него ходят.
    Для детей - ФИО, возраст, и в какой садик они ходят.
</p>

<p>Приложение должно реализовывать следующий функционал</p>
<ol>
    <li>CRUD редактирование детских садов.</li>
    <li>CRUD редактирование детей.</li>
    <li>Возможность поменять в какой садик ходит ребёнок.</li>
    <li>Возможность посмотреть список детей ходящих в каждый сад.</li>
</ol>
<p>Ожидаемый технологический стэк</p>
<ul>
    <li>( MSSQL | MySql | Postgres )</li>
    <li>( Entity Framework | NHibernate )</li>
    <li>( ASP.NET MVC | ASP.NET WebAPI + ( Angular | React | Knockout ) )</li>
</ul>

<h2>Замечания:</h2>
<ol>
    <li>Не отличить ViewModel/Entity которые использует entity framework: это в проекте одно и тоже, и используется на всех уровнях в приложении.</li>
    <i>Добавлены модели для DAL</i>
    <li>Стоит попробовать подключить какой-нибудь DI контейнер, чтобы не создавать зависимости (репозитории, контекст базы) вручную.</li>
    <i>Реализовано Dependency Injection при помощи Unity</i>
    <li>Нигде не вызывается .Dispose() у ChildhoodMinistryDB, что неверно для IDisposable ресурса.</li>
    <i>Реализовано</i>
    <li>ChildhoodRepository.GetItems() возвращает IEnumerable а соответственно всю таблицу из базы вместе с собой, что очень неэффективно при существенных объёмах данных.</li>
    <i>Возвращаемый тип изменён на список объектов List</i>
    <li>Неэффективное использование ангуляра для реализации добавления/редактирования. Стоило бы использовать отдельные контроллеры/темплейты/директивы для изолирования ответственности компонент.</li>
    <i>Разделена логика добавления и редактирования записей в разные функции</i>
    <li>Разные типы возвращаемых результатов в экшенах контроллера: где-то возвращаются string c текстом ошибки, где-то json</li>
    <i>Возвращаемый тип в экшенах изменён на json</i>
    <li>Все проперти модели копируются в scope по отдельности, что делать если модель расиширилась?</li>
    <i>Убрана жёсткая привязка свойств модели к scope</i>
</ol>